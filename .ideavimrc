
" Find more examples here: https://jb.gg/share-ideavimrc
" ================================================================================================
" = Extensions =====================================
" ================================================================================================
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'
" ================================================================================================
" = Basic settings =====================================
" ================================================================================================
set clipboard+=unnamed
set ignorecase
set scrolloff=15
set scroll=12
set history=200

set number
set relativenumber
set multiple-cursors
set incsearch
set hlsearch
" ================================================================================================
"  No Leader Keymaps =====================================

" ================================================================================================
nmap ge <action>(GotoNextError)
nmap gt <action>(GotoTest)
nmap gm <action>(MethodUp)
nmap gi <action>(GotoImplementation)
nmap gd <action>(GotoDeclaration)
nmap gh <action>(Back)
nmap gl <action>(Forward)

" last changed in current buffer(file)
nmap ga '.
" bookmark in whole program
nmap ma <action>(ToggleBookmark)
nmap ms mS
nmap 's 'S
nmap md mD
nmap 'd 'D
nmap mf mF
nmap 'f 'F
" ===
" === multiple-cursors
" ===
nmap <S-C-j> <Plug>AllWholeOccurrences
xmap <S-C-j> <Plug>AllWholeOccurrences
nmap <S-j> <Plug>NextOccurrence
xmap <S-j> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <S-k> <Plug>RemoveOccurrence
" Insert mode shortcut
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
inoremap <C-i> <Home>
inoremap <C-a> <End>
inoremap <C-d> <Delete>
" copy and paste
noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>P "0p
vnoremap Y "+y
" ËÆæÁΩÆdebug‰∏∫ zd
:nnoremap zd :action Debug<CR>
:nnoremap zmd :action ChooseDebugConfiguration<CR>
:nnoremap zs :action Stop<CR>
:nnoremap zb :action ToggleLineBreakpoint<CR>
:noremap zzr :action Replace<CR>
" ËÆæÁΩÆrun ‰∏∫ zr
:nnoremap zr :action Run<CR>
:nnoremap zlr :action leetcode.editor.RunCodeAction<CR>
:nnoremap zld :action leetcode.editor.SubmitAction<CR>

:nnoremap za <ESC>ggvG$
:nnoremap zy <ESC>ggvG$y
:nnoremap zp <ESC>ggvG$p
:nnoremap <A-q> :action CloseContent<CR>
:nnoremap <A-w> :action CloseAllEditorsButActive<CR>

inoremap  <C-s> <ESC>:w<CR>
nnoremap <C-s> :w<CR>
nmap <A-j> <action>(NextTab)
nmap <A-k> <action>(PreviousTab)

imap <A-j> <action>(NextTab)
imap <A-k> <action>(PreviousTab)
nmap <A-s-j> <action>(com.mnw.tabmover.actions.MoveTabDownAction)
nmap <A-s-k> <action>(com.mnw.tabmover.actions.MoveTabUpAction)
inoremap jk <ESC>

" ================================================================================================
" = Leader Keymaps =====================================
" ================================================================================================
" leaderkey
let mapleader=" "

" ================================================================================================
" üëªüëªüëª Which-Key üëªüëªüëª
" ================================================================================================
set which-key
set notimeout

" d: diff
nmap <leader>dd <action>(Vcs.ShowTabbedFileHistory)

 " Press `F` to activate Target Mode
nmap <leader>fw <Action>(AceTargetAction)
 " Press `g` to activate Line Mode
"  map g <Action>(AceLineAction)map 

" f: Find/Format ‚≠êÔ∏è
let g:WhichKeyDesc_FindOrFormat = "<leader>f FindOrFormat"
let g:WhichKeyDesc_FindOrFormat_FindFile = "<leader>ff FindFile"
nmap <leader>ff <action>(GotoFile)

let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>fl FindFileLocation"
nmap <leader>fl <action>(SelectInProjectView)

let g:WhichKeyDesc_FindOrFormat_FindText = "<leader>ft FindText"
nmap <leader>ft <action>(FindInPath)

let g:WhichKeyDesc_FindOrFormat_Commands = "<leader>fc Commands"
nmap <leader>fc <action>(GotoAction)

let g:WhichKeyDesc_FindOrFormat_OpenedProject = "<leader>fp OpenedProject"
nmap <leader>pf <action>(OpenProjectWindows)

nmap <leader>pj <action>(NextProjectWindow)
nmap <leader>pk <action>(PreviousProjectWindow)

nmap <leader>pm <action>(ManageRecentProjects)

nmap <leader>pc <action>(CloseProject)

let g:WhichKeyDesc_FindOrFormat_Format = "<leader>fm Format"
nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)


nmap <leader>ee :e C:\\Users\\zhouzhou\\.ideavimrc<CR>
nmap <leader>el <action>(IdeaVim.ReloadVimRc.reload)
nmap <leader>ef <action>(VimFindActionIdAction)
" g: Git ‚≠êÔ∏è
let g:WhichKeyDesc_Git = "<leader>g Git"
let g:WhichKeyDesc_Git_RollbackHunk = "<leader>gr RollbackHunk"
" nmap <leader>gr :action Vcs.RollbackChangedLines<CR>
nmap <leader>gr :action ChangesView.Revert<CR>


nmap <leader>' ^f"vi"
nmap <leader>( ^f(vi)
" i: Insert ‚≠êÔ∏è
let g:WhichKeyDesc_InsertAfterBrackets = "<leader>i InsertAfterBrackets"
nmap <leader>, A,<ESC>o
nmap <leader>; A;<ESC>o
imap jj j<ESC>a
imap j, <ESC>A,<ESC>o
imap j; <ESC>A;<ESC>o
imap j[ <ESC>A{<ESC>o
imap j<Enter> <ESC>o
" ÁßªÂä®Ëá≥Ë°åÈ¶ñ„ÄÅË°åÂ∞æ
nnoremap H ^
nnoremap L $


" n: No ‚≠êÔ∏è
let g:WhichKeyDesc_No_Highlight = "<leader>nl NoHighlight"
nmap <leader>nl :nohlsearch<CR>


" s: Show ‚≠êÔ∏è
let g:WhichKeyDesc_Show = "<leader>s Show"
let g:WhichKeyDesc_Show_FileStructure = "<leader>ss ShowFileStructure"
nmap <leader>ss <action>(FileStructurePopup)
let g:WhichKeyDesc_Show_Bookmarks = "<leader>sb ShowBookmarks"
nmap <leader>sm <action>(ShowBookmarks)
let g:WhichKeyDesc_Show_ParameterInfo = "<leader>sb ShowParameterInfo"
nmap <leader>sp <action>(ParameterInfo)
nmap <leader>sd <action>(QuickJavaDoc)

nmap <leader>sf <action>(RecentFiles)
nmap <leader>srp <action>(ManageRecentProjects)
nmap <leader>sh <action>(LocalHistory.ShowHistory)
nmap <leader>sl <action>(ShowFilePath)

" r: Run/Re ‚≠êÔ∏è
let g:WhichKeyDesc_RunOrRe = "<leader>r RunOrRe"
let g:WhichKeyDesc_RunOrRe_ReRun = "<leader>rr ReRun"
nmap <leader>rr <action>(Rerun)
let g:WhichKeyDesc_RunOrRe_ReRunTests = "<leader>rt ReRunTests"
nmap <leader>rt <action>(RerunTests)
let g:WhichKeyDesc_RunOrRe_Rename = "<leader>rn Rename"
map <leader>rn <action>(RenameElement)

" w: Window ‚≠êÔ∏è
let g:WhichKeyDesc_Windows = "<leader>w Windows"
let g:WhichKeyDesc_Windows_maximize = "<leader>wo maximize"
nmap <leader>w <action>(UnsplitAll) \| <action>(HideAllWindows)
nmap <leader>o <action>(ToggleFullScreen)

let g:WhichKeyDesc_Windows_splitWindowVertically = "<leader>l splitWindowVertically"
nmap <leader>l <action>(SplitVertically)

" z: zip(fold) ‚≠êÔ∏è
let g:WhichKeyDesc_Zip = "<leader>z Zip"
let g:WhichKeyDesc_Zip_unZipAll = "<leader>zo unZipAll"
nmap <leader>zo <action>(ExpandAllRegions)
let g:WhichKeyDesc_Zip_ZipAll = "<leader>zc ZipAll"
nmap <leader>zc <action>(CollapseAllRegions)

" c: Close ‚≠êÔ∏è;
let g:WhichKeyDesc_CloseBuffer = "<leader>c CloseBuffer"
nmap <leader>c :q!<CR>

" e: Extract
" extract method/function
vmap <leader>em <action>(ExtractMethod)
" extract constant
vmap <leader>ec <action>(IntroduceConstant)
" extract field
vmap <leader>ef <action>(IntroduceField)
" extract variable
vmap <leader>ev <action>(IntroduceVariable)